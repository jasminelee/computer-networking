https://lagunita.stanford.edu/courses/Engineering/Networking-SP/SelfPaced/courseware/c43cc41ee5764363b36ddd99c8b32f26/d519552b8bd3421bb7cc8e30b7c6745b/

ICN 2.0 Transport
- TCP is a reliable, end-to-end, bi-directional byte stream. 95% of all internet apps use this
- UDP: simple, unreliable datagrams

ICN 2.1 TCP service model
- Transmission Control Protocol (TCP)
    - Link frame contains IP datagram which contains tcp segment which contains application byte stream
    - peer TCP layers communicate. TCP connection is between two hosts set up via a 3-way handshake: syn, syn-ack, and ack. 
    - TCP "stream of bytes" service, can be a static html page or a stream of real-time video camera data. 
        - TCP sender and receiver hosts work together to ensure data is sent in order
    - connection teardown: fin, ack. A can tell B it's ready to close the connection. B can respond with its leftover data until it sends a fin to A which then acks back and fully closes the conn.
- Reliable delivery
    - acknowledgements indicate correct delivery
    - checksums detect corrupted data. 
    - sequence numbers detect missing data
    - flow-control prevents overrunning receiver. in TCP, receiver tells sender whether it can keep sending
- TCP controls congestion 
- TCP segment format
    - web data is port 80 (see IANA port numbers)
- Port demultiplexing
    - at the receiver, the TCP layer accepts datagrams from network layer and then delivers the datagrams to their respective sockets and eventually, the respective processes
- a socket is a software interface between Application and Transport layers. when a process sends a message, the message has to pass the socket to reach the Transport layer. 
- a checksum is the number of correct bytes. 
    - checksums algorithm uses ones complement
- speed of light cost associated with decentralized, blockchain systems?
- stop and wait vs sliding window
    - 

ICN 2.2: UDP (User datagram protocol) service model
- UDP datagram is simple. has 4 fields in its header instead of 10 like TCP has. 
- connectionless datagram service
- unreliable. no acknowledgements, no flow control, no mechanism to detect missing or missequenced datagrams
- most video streaming uses TCP instead of UDP bc HTTP is built on top of TCP
- UDP is considered a demultiplexer bc it receives things and has to choose which port it should go to

ICN 2.3: ICMP service model
- Internet Control Message Protocol is a Tranport layer protocol that sets on top of the Network. 
- Network Layer: 
    - IP. hop-by-hop delivery from end to end
    - Routing Tables. algos to populate router forwarding tables
    - ICMP. communicates network layer info between end hosts and routers. 
- ICMP service model
    - contains a self-contained message reporting error
    - is unreliable. simple. no retries.
- ICMP packet is inside an IP datagram
- traceroute tells you which path was taken by packets, and how long
    - UDP is encapsulated in IP datagram. 
- "ping" and "traceroute" both rely on ICMP

ICN 2.4: The End-to-End Principle
- why doesn't the network compress data, reformate/improve requests, serve cached data, add security, etc? Bc of the end-to-end principle, which is the idea that we should leave the end points/applications to do all the work. 
- if a package of data is corrupted in transmission, then a recipient can reject it. if a sender doesn't get acknowledgement of successful transmission via TCP, it can resend. 
    - link error detection is designed for errors in transmission, not for errors in storage. so, end-to-end check is responsbile for correctness.
    - TCP offers reliable byte stream. chunks are transferred and checked upon arrival end-to-end.
- link reliability
    - 99% of wired link layer transmissions are successful. wireless is 50-80%
    - wireless link layers improve their reliability by using link layer acknowledgements. link layer help greatly improves TCP performance
- "Strong" end to end: the network's job is to transmit datagrams as efficiently and flexibly as possible. don't implement improvements in the middle bc they can increase latency. everything should be done at the fringes. bc improvements to the middle means difficulty changing network designs

ICN 2.5: Error detection
- 3 schemes: checksum, CRC, and MAC
- Checksum adds up values in a packet (IP, TCP). fast and cheap but weak guarantees as to which errors it will catch
    - one's or two's complement. binary arithmetic to catch errors, not very robust so heavy lifting is done at the link layer vis CRC
- Cyclic redundancy code (CRC)
    - more robust and expensive
    - link layers use CRC so TCP/IP can use checksum
    - uses polynomial long division 
- message authentication code (MAC)
    - combines packets with secret info to generate a value. crypotographic transformation of data (TLS, transport layer security. used for HTTPS). 
    - not as good for error detection as CRC
- each layer has its own error detection: end to end principle! each layer needs an end to end check. ethernet needs it frames to be parsed correctly. IP packets need to be correct. 

ICN 2.6a: Finite state machines 1
- FSM Protocol Specification
- a state is a configuration of a system
- see TCP Connection FSM

ICN 2.7: Reliable communications - stop and wait
- Flow control needed for when sender sends more packets/sec than receiver can receive. 
- flower control does:
    - not send more packets than receiver can process
    - receiver gives sender feedback
    - two approaches:
        - stop and wait
        - sliding window
- Stop and Wait
    - at most one packet in flight at any time. sender sends one packet at a time. receiver sends acknowledgement packet when it receives data
    - one-bit counter to detect duplicate data
- Sliding Window
    - generalization of stop-and-wait. allows multiple unacked segments 
    - bound of number of un-acked segments, called a window

Class 4 
mux is shorthand for multiplexer 

https://my.bradfieldcs.com/networking/2018-07/transport-layer-exercise/
- nc -l -u <port netcat is listening on>

use sockets within a python try finally bc the finally will close the socket after the program starts. otherwise, the binding will be stored in RAM and kept alive. will need to kill process individually or clean up in python program. 

Class 5
DHCP
MAc address is the link layer address
$ifconfig en0
ARP protocol maps IP addresses to MAC addresses
AS - autonomous system
sock_raw to get raw sockets
https://my.bradfieldcs.com/networking/2018-07/network-layer-exercise/
